/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import spotfei.model.Usuario;
import spotfei.model.PlayList;
import spotfei.dao.UsuarioDAO;
import java.util.List;
import view.EditarPlaylistView;
/**
 * Tela de gerenciamento das playlists do usuário logado.
 * Permite visualizar, editar, excluir e criar playlists.
 * Também oferece retorno ao menu principal.
 * 
 * @author joaog
 */
public class PlaylistsView extends javax.swing.JFrame {

    /**
     * Carrega as playlists do usuário logado e exibe na tabela.
     */
private void carregarPlaylists() {
        Usuario usuarioLogado = Usuario.UsuarioLogado.getUsuarioLogado();
        if (usuarioLogado != null) {
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0); 
            for (PlayList p : usuarioLogado.getPlaylists()) {
                model.addRow(new Object[]{p.getNome()}); 
            }
        }
    }
    /**
     * Construtor da classe PlaylistsView.
     * Inicializa os componentes e carrega as playlists do usuário logado.
     */
public PlaylistsView() {
    initComponents();
    carregarPlaylists(); 
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("                                   Minhas PlayLists");

        jButton1.setText("Editar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Excluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Criar Playlist");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Playlist"
            }
        ));
        jTable2.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(jTable2);

        jButton4.setText("Menu");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(65, 65, 65))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButton4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Abre a tela de edição da playlist selecionada.
     * @param evt Evento de clique no botão "Editar"
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    int linhaSelecionada = jTable2.getSelectedRow();

    if (linhaSelecionada != -1) {
        String nomePlaylist = jTable2.getValueAt(linhaSelecionada, 0).toString();

        Usuario usuarioLogado = Usuario.UsuarioLogado.getUsuarioLogado();
        if (usuarioLogado != null) {
            for (PlayList p : usuarioLogado.getPlaylists()) {
                if (p.getNome().equals(nomePlaylist)) {
                    EditarPlaylistView editar = new EditarPlaylistView(p);
                    editar.setVisible(true);
                    this.dispose();
                    return;
                }
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione uma playlist para editar.");
    }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Exclui a playlist selecionada após confirmação do usuário.
     * @param evt Evento de clique no botão "Excluir"
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
int linhaSelecionada = jTable2.getSelectedRow();

    if (linhaSelecionada != -1) {
        String nomePlaylist = jTable2.getValueAt(linhaSelecionada, 0).toString();

        int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja apagar a playlist?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirmacao == JOptionPane.YES_OPTION) {
            Usuario usuarioLogado = Usuario.UsuarioLogado.getUsuarioLogado();
            if (usuarioLogado != null) {
                PlayList paraRemover = null;
                for (PlayList p : usuarioLogado.getPlaylists()) {
                    if (p.getNome().equals(nomePlaylist)) {
                        paraRemover = p;
                        break;
                    }
                }

                if (paraRemover != null) {
                    usuarioLogado.getPlaylists().remove(paraRemover);
                    new UsuarioDAO().atualizarPlayLists(usuarioLogado);
                    JOptionPane.showMessageDialog(this, "Playlist removida com sucesso!");
                    carregarPlaylists();
                }
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione uma playlist para apagar.");
    }    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Abre a tela de criação de nova playlist.
     * @param evt Evento de clique no botão "Criar Playlist"
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        CriarPlaylistView criar = new CriarPlaylistView();
        criar.setVisible(true);
        this.dispose();    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Retorna ao menu principal.
     * @param evt Evento de clique no botão "Menu"
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    Menu menu = new Menu(); 
    menu.setVisible(true);

    this.dispose();       }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
